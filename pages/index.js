import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { AiOutlineSearch } from "react-icons/ai";
import { useEffect, useState } from "react";
import Pokemon from "../com/Pokemon";
import Link from "next/link";
import Navbar from "../com/Navbar";
import Skeleton from "@mui/material/Skeleton";
import Stack from "@mui/material/Stack";
import { colorslice } from "../utils/store";
export default function Home() {
  const [urlMain, setUrlMain] = useState(
    "https://pokeapi.co/api/v2/pokemon-species/?limit=21&offset=0"
  );
  const [mainData, setMainData] = useState([]);
  const [pokemons, setPokemons] = useState([]);
  const [search, setSearch] = useState("");
  const [gender, setGender] = useState([]);
  const [region, setRegion] = useState([]);
  const [habitat, setHabitat] = useState([]);
  const [state, setState] = useState(true);

  async function handleGender() {
    const res = await fetch("https://pokeapi.co/api/v2/gender/");
    const data = await res.json();
    setGender(data.results);
  }
  async function filterPokemonByGender(url) {
    if (url) {
      const res = await fetch(url);
      const data = await res.json();
      setPokemons(data.pokemon_species_details.slice(0, 20));
      setState(false);
    }
  }
  async function filterPokemonByHabitat(url) {
    if (url) {
      const res = await fetch(url);
      const data = await res.json();
      setState(false);
      setPokemons(data.pokemon_species);
    }
  }
  async function handleRegion() {
    const res = await fetch("https://pokeapi.co/api/v2/region/");
    const data = await res.json();
    setRegion(data.results);
  }
  async function handleHabitat() {
    const res = await fetch("https://pokeapi.co/api/v2/pokemon-habitat/");
    const data = await res.json();
    setHabitat(data.results);
  }

  async function handlePokemons() {
    const res = await fetch(urlMain);
    const data = await res.json();
    setMainData(data);
    setPokemons(data.results);
    handleRegion();
    handleGender();
    handleHabitat();
  }
  const handleSearch = async () => {
    const res = await fetch(
      `https://pokeapi.co/api/v2/pokemon-species/?limit=200&`
    );
    const data = await res.json();

    const filteredPokemon = data.results.filter((pokemon) => {
      return pokemon.name.includes(search);
    });
    setState(false);
    setPokemons(filteredPokemon);
  };
  useEffect(() => {
    handlePokemons();
  }, [urlMain]);
  return (
    <div>
      <div className="h-screen ">
        <Head>
          <title>Pikachu</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Navbar setState={setState} handlePokemons={handlePokemons} />
        {pokemons ? (
          <div>
            <div className="p-2">
              <div className="  md:flex justify-center mt-4 p-3 items-center">
                <div className="flex gap-2 md:w-[80%] w-[100%] justify-center items-center">
                  <input
                    type="text"
                    name=""
                    id=""
                    className="rounded-md border-b-2 p-2 w-[100%]  focus:outline-none"
                    placeholder="Enter the name of the pokemon"
                    onChange={(e) => {
                      setSearch(e.target.value);
                    }}
                    onKeyDown={(e) => {
                      if (e.key === "Enter") {
                        handleSearch();
                      }
                    }}
                  />
                  <AiOutlineSearch
                    onClick={handleSearch}
                    className="h-7 cursor-pointer w-10"
                  />
                </div>

                <div className="flex pt-4 justify-between items-center">
                  <select
                    className=""
                    id="Gender"
                    onChange={(e) => {
                      filterPokemonByGender(e.target.value);
                    }}
                  >
                    <option className="" value="Gender" defaultChecked>
                      Gender
                    </option>
                    {gender.map((gender, i) => (
                      <option key={i} className="" value={gender.url}>
                        {gender.name}
                      </option>
                    ))}
                  </select>
                  {/* <select id="">
                <option value="Gender">Region</option>
                <option value=""></option>
              </select> */}
                  <select
                    id=""
                    className=""
                    onChange={(e) => {
                      filterPokemonByHabitat(e.target.value);
                    }}
                  >
                    <option value="Gender">Habitat</option>
                    {habitat.map((habitat, i) => (
                      <option key={i} value={habitat.url}>
                        {habitat.name}
                      </option>
                    ))}
                  </select>
                </div>
              </div>
              <div className="flex flex-wrap gap-4 py-4 item-center justify-center">
                {pokemons.map((pokemon, i) => (
                  <div key={i}>
                    {!pokemon.pokemon_species ? (
                      <Link href={`/pokemon/${pokemon.name}`}>
                        <div key={i} className=" ">
                          <Pokemon name={pokemon.name} url={pokemon.url} />
                        </div>
                      </Link>
                    ) : (
                      <Link href={`/pokemon/${pokemon.pokemon_species.name}`}>
                        <div key={i} className=" ">
                          <Pokemon
                            name={pokemon.pokemon_species.name}
                            url={pokemon.pokemon_species.url}
                          />
                        </div>
                      </Link>
                    )}
                  </div>
                ))}
              </div>
            </div>
            <footer>
              {state && (
                <div className="flex justify-center items-center gap-3 font-semibold ">
                  <button
                    onClick={() => {
                      mainData.previous && setUrlMain(mainData.previous);
                    }}
                    className="bg-zinc-100 hover:bg-slate-300 p-3"
                  >
                    Prev
                  </button>
                  <button
                    onClick={() => {
                      mainData.next && setUrlMain(mainData.next);
                    }}
                    className="bg-zinc-100 hover:bg-slate-300 p-3"
                  >
                    Next
                  </button>
                </div>
              )}
            </footer>
          </div>
        ) : (
          <Stack spacing={1}>
            <Skeleton variant="text" sx={{ fontSize: "1rem" }} />
            <Skeleton variant="rectangular" width={210} height={60} />
            <Skeleton variant="rectangular" width={210} height={60} />
            <Skeleton variant="rectangular" width={210} height={60} />
            <Skeleton variant="rectangular" width={210} height={60} />
            <Skeleton variant="rectangular" width={210} height={60} />
            <Skeleton variant="rectangular" width={210} height={60} />
            <Skeleton variant="rectangular" width={210} height={60} />
            <Skeleton variant="rectangular" width={210} height={60} />
            <Skeleton variant="rectangular" width={210} height={60} />
          </Stack>
          // <div>Loading..</div>
        )}
      </div>
    </div>
  );
}
